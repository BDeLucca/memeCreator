{"version":3,"sources":["components/MemeEditor/FreeStyleMeme/index.module.css","components/MemeEditor/TextImage/FontButtons/index.module.css","components/IntroPage/intropage.module.css","components/MemeEditor/index.module.css","components/IntroPage/index.js","components/MemeEditor/TextImage/FontButtons/index.js","components/MemeEditor/TextImage/ColorPicker/index.js","components/MemeEditor/TextImage/index.js","components/MemeEditor/FreeStyleMeme/calcPos.js","components/MemeEditor/FreeStyleMeme/MemeTextState.js","components/MemeEditor/FreeStyleMeme/Meme/MemeText.js","components/MemeEditor/FreeStyleMeme/Meme/MemeImage.js","components/MemeEditor/FreeStyleMeme/Meme/index.js","components/MemeEditor/FreeStyleMeme/Meme/Meme.js","components/MemeEditor/downloadImg.js","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/index.js","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/MemeTextOptions.js","components/MemeEditor/FreeStyleMeme/Options/index.js","components/MemeEditor/FreeStyleMeme/Options/Options.js","components/MemeEditor/FreeStyleMeme/FreeStyleMeme.js","components/MemeEditor/FreeStyleMeme/index.js","components/MemeEditor/Nav/index.js","components/MemeEditor/index.js","components/MemeEditor/useImage.js","App.js","serviceWorker.js","index.js","components/MemeEditor/TextImage/ColorPicker/index.module.css","components/MemeEditor/Nav/index.module.css","components/MemeEditor/FreeStyleMeme/Options/index.module.css","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/index.module.css","components/MemeEditor/TextImage/index.module.css"],"names":["module","exports","useState","meme","setMeme","useEffect","fetch","then","response","json","result","console","log","data","memes","map","x","url","catch","error","className","styles","component","linkMemeTypes","to","memeTypesImg","src","alt","imgContainer","slice","FontButtons","props","styleOptions","fontButtonContainer","Button","onClick","setFont","style","fontFamily","fontSize","sizeButtons","setSize","letterSize","height","ColorPicker","showColorPicker","setShowColorPicker","bodyContainer","ChromePickerContainer","display","color","currentColor","onChange","updatedColor","setColor","hex","React","forwardRef","imageNodeRef","image","setImage","getImage","text","inner","topText","setTopText","bottomText","setBottomText","fontText","setFontText","setFontSize","textColor","setTextColor","getInnerStyle","font","SizeOfFont","getOuterStyle","backgroundColor","memeContainer","width","textTop","MemeImage","ref","textBottom","options","htmlFor","inp","id","type","value","e","target","label","focusBg","fontStyleContainer","children","memeImage","backgroundImage","position","backgroundRepeat","backgroundSize","calcRelativePos","relation","left","pageX","totalOffsetLeft","top","pageY","totalOffsetTop","getTotalLocation","node","offsetLeft","offsetTop","offsetParent","reducer","memeTexts","action","addText","setText","removeText","changeTextStyle","changePosition","onFocus","event","newMemeText","getNewMemeText","v","focus","index","findIndexById","arr","reduce","total","next","newText","JSON","parse","stringify","new","prop","parseInt","newPos","calcPos","zIndex","cols","resize","borderWidth","borderColor","transform","element","useContext","MemeTextsContext","reduceMemeTexts","offset","onDrag","focusedMemeText","useRef","current","draggable","onDragEnd","rows","Math","max","split","length","adjustRows","num","expandWithText","Meme","onImageClick","MemeTexts","i","MemeText","key","downloadImg","memeName","domeToImage","toPng","dataUrl","name","link","document","createElement","download","href","click","downloadMeme","MemeTextOptions","memeText","headline","removeButton","propName","Options","memeImageRef","memeTextsButtons","filter","createContext","FreeStyleMeme","selectedMeme","useReducer","setOffSet","Provider","Nav","goHome","setGoHome","navContainer","accept","nums","floor","random","resizeImg","img","setTimeout","ratio","Image","reader","FileReader","onload","readAsDataURL","files","useImage","memeType","useParams","setSelectedMeme","nameMeme","setNameMeme","handleMemeSelector","editor","nav","header","egMemeContainer","imgMeme","TextImage","App","path","MemeEditor","IntroPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3b619872.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"FreeStyleMeme_bodyContainer__eWctY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleOptions\":\"FontButtons_styleOptions__3giQ8\",\"fontButtonContainer\":\"FontButtons_fontButtonContainer__1e5e0\",\"sizeButtons\":\"FontButtons_sizeButtons__3xlc_\",\"Button\":\"FontButtons_Button__2q4u4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"intropage_component__2Eph7\",\"Link\":\"intropage_Link__N71EU\",\"imgContainer\":\"intropage_imgContainer__1SqrB\",\"memeTypesImg\":\"intropage_memeTypesImg__1jzvQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"MemeEditor_editor__2BjEE\",\"nav\":\"MemeEditor_nav__2g9DJ\",\"header\":\"MemeEditor_header__eMX6P\",\"bodyContainer\":\"MemeEditor_bodyContainer__3Uf20\",\"egMemeContainer\":\"MemeEditor_egMemeContainer__3Q8rE\",\"imgMeme\":\"MemeEditor_imgMeme__1yGOA\"};","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./intropage.module.css\";\r\n\r\nexport default () => {\r\n  const [meme, setMeme] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\" https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        setMeme(result.data.memes.map((x) => x.url)); // <-- this is an array of urls\r\n      })\r\n      .catch((error) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.component}>\r\n      <br />\r\n      <nav>\r\n        <button>Categories</button>\r\n        <button>Sign In</button>{\" \"}\r\n      </nav>\r\n      <br />\r\n      <h1>Welcome to the Meme creator</h1>\r\n      <br />\r\n      <div>\r\n        <Link className={styles.linkMemeTypes} to=\"/memeCreator/textInOfImage\">\r\n          Text in image\r\n          <img\r\n            className={styles.memeTypesImg}\r\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\r\n            alt=\"funny\"\r\n          ></img>\r\n        </Link>\r\n        <Link className={styles.linkMemeTypes} to=\"/memeCreator/freestyle\">\r\n          <h3>Editor 2</h3>\r\n          <img\r\n            className={styles.memeTypesImg}\r\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\r\n            alt=\"serious\"\r\n          ></img>\r\n        </Link>\r\n      </div>\r\n      <br />\r\n      <div className={styles.imgContainer}>\r\n        {meme.slice(0, 20).map((x) => (\r\n          <img src={x} alt=\"img1\"></img>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nconst FontButtons = (props) => {\r\n  return (\r\n    <div className={styles.styleOptions}>\r\n      {/* Buttons for the Font family */}\r\n      <div className={styles.fontButtonContainer}>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"Georgia, serif\")}\r\n          style={{\r\n            fontFamily: \"Georgia, serif\",\r\n            fontSize: 15 + \"px\",\r\n          }}\r\n        >\r\n          Georgia\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"Arial Black\")}\r\n          style={{ fontFamily: \"Arial Black\", fontSize: 13 + \"px\" }}\r\n        >\r\n          Arial Black\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"monospace\")}\r\n          style={{ fontFamily: \"monospace\" }}\r\n        >\r\n          Monospace\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"Comic Sans MS\")}\r\n          style={{ fontFamily: \"Comic Sans MS\" }}\r\n        >\r\n          Comic Sans\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"cursive\")}\r\n          style={{ fontFamily: \"cursive\" }}\r\n        >\r\n          Cursive\r\n        </button>\r\n        {/* Buttons for the size */}\r\n        <div className={styles.sizeButtons}>\r\n          <button\r\n            className={styles.Button}\r\n            onClick={() => props.setSize(props.letterSize + 1)}\r\n            style={{ fontSize: \"15px\", height: \"35px\" }}\r\n          >\r\n            A+\r\n          </button>\r\n          <button\r\n            className={styles.Button}\r\n            onClick={() => props.setSize(props.letterSize - 1)}\r\n            style={{ fontSize: \"10px\", height: \"35px\" }}\r\n          >\r\n            A-\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FontButtons;\r\n","import React, { useState } from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport styles from \"./index.module.css\";\r\n\r\nconst ColorPicker = (props) => {\r\n  const [showColorPicker, setShowColorPicker] = useState(false);\r\n  return (\r\n    <div className={styles.bodyContainer}>\r\n      <button\r\n        className={styles.Button}\r\n        onClick={() =>\r\n          setShowColorPicker((showColorPicker) => !showColorPicker)\r\n        }\r\n      >\r\n        {showColorPicker ? \"Close\" : \"Text Color\"}\r\n      </button>\r\n      <div\r\n        className={styles.ChromePickerContainer}\r\n        style={!showColorPicker ? { display: \"none\" } : null}\r\n      >\r\n        <ChromePicker\r\n          color={props.currentColor}\r\n          onChange={(updatedColor) => props.setColor(updatedColor.hex)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\n// import downloadImg from \"../downloadImg\";\r\n\r\nimport useImage from \"../useImage\";\r\n\r\nimport FontButtons from \"./FontButtons\";\r\n\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nexport default React.forwardRef(\r\n  ({ image, setImage, getImage }, imageNodeRef) => {\r\n    const [topText, setTopText] = useState({ text: \"top text\", inner: true });\r\n    const [bottomText, setBottomText] = useState({\r\n      text: \"bottom text\",\r\n      inner: true,\r\n    });\r\n\r\n    const [fontText, setFontText] = useState(\"\");\r\n\r\n    const [fontSize, setFontSize] = useState(12);\r\n\r\n    const [textColor, setTextColor] = useState(\"black\");\r\n\r\n    const getInnerStyle = (text, font, SizeOfFont) => {\r\n      return {\r\n        display: text.inner ? \"block\" : \"none\",\r\n        color: textColor,\r\n        fontFamily: font,\r\n        fontSize: SizeOfFont,\r\n      };\r\n    };\r\n    // Function that create the top text section\r\n    const getOuterStyle = (text, font, SizeOfFont) => {\r\n      return {\r\n        display: !text.inner ? \"block\" : \"none\",\r\n        color: textColor,\r\n        backgroundColor: text.inner ? \"transparent\" : \"white\",\r\n        fontFamily: font,\r\n        fontSize: SizeOfFont,\r\n      };\r\n    };\r\n\r\n    return (\r\n      <div className={styles.bodyContainer}>\r\n        <div\r\n          className={styles.memeContainer}\r\n          style={{\r\n            height: image.height + \"px\",\r\n            width: image.width + \"px\",\r\n          }}\r\n        >\r\n          <div\r\n            style={getOuterStyle(topText, fontText, fontSize)}\r\n            className={styles.textTop}\r\n          >\r\n            {topText.text}\r\n          </div>\r\n\r\n          <MemeImage ref={imageNodeRef} image={image} onClick={() => {}}>\r\n            <div\r\n              style={getInnerStyle(topText, fontText, fontSize)}\r\n              className={styles.textTop}\r\n            >\r\n              {topText.text}\r\n            </div>\r\n            {/* This span prevents that the bottom text to go up when the top text is outside of the image */}\r\n            <span></span>\r\n\r\n            {/* Inside Bottom text */}\r\n            <div\r\n              style={getInnerStyle(bottomText, fontText, fontSize)}\r\n              className={styles.textBottom}\r\n            >\r\n              {bottomText.text}\r\n            </div>\r\n          </MemeImage>\r\n          <div\r\n            style={getOuterStyle(bottomText, fontText, fontSize)}\r\n            className={styles.textBottom}\r\n          >\r\n            {bottomText.text}\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.options}>\r\n          {/* Text Input. Top and Bottom */}\r\n          <label htmlFor=\"inp\" className={styles.inp}>\r\n            <input\r\n              id=\"inp\"\r\n              type=\"text\"\r\n              value={topText.text}\r\n              onChange={(e) => {\r\n                setTopText({ ...topText, text: e.target.value });\r\n              }}\r\n            />\r\n            <span className={styles.label}>Top Text</span>\r\n            <span className={styles.focusBg}></span>\r\n          </label>\r\n          <label htmlFor=\"inp2\" className={styles.inp}>\r\n            <input\r\n              id=\"inp2\"\r\n              type=\"text\"\r\n              value={bottomText.text}\r\n              onChange={(e) => {\r\n                setBottomText({ ...bottomText, text: e.target.value });\r\n              }}\r\n            />\r\n            <span className={styles.label}>Bottom Text</span>\r\n            <span className={styles.focusBg}></span>\r\n          </label>\r\n\r\n          {/* Button to Change Top text position */}\r\n          <button\r\n            className={styles.Button}\r\n            onClick={() => setTopText({ ...topText, inner: !topText.inner })}\r\n          >\r\n            Top in/out\r\n          </button>\r\n\r\n          {/* Button to Change Bottom text position */}\r\n          <button\r\n            className={styles.Button}\r\n            onClick={() =>\r\n              setBottomText({ ...bottomText, inner: !bottomText.inner })\r\n            }\r\n          >\r\n            bottom in/out\r\n          </button>\r\n        </div>\r\n        <div className={styles.fontStyleContainer}>\r\n          <FontButtons\r\n            setFont={setFontText}\r\n            setSize={setFontSize}\r\n            letterSize={fontSize}\r\n          ></FontButtons>\r\n          <ColorPicker setColor={setTextColor} currentColor={textColor} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst MemeImage = React.forwardRef(({ image, children }, imageNodeRef) => {\r\n  return (\r\n    <div\r\n      ref={imageNodeRef}\r\n      className={styles.memeImage}\r\n      style={{\r\n        backgroundImage: \"url(\" + image.src + \")\",\r\n        height: image.height + \"px\",\r\n        width: image.width + \"px\",\r\n        position: \"relative\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"contain\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n","export default (e) => {\r\n  const relation = getTotalLocation(e.target);\r\n  return calcRelativePos(e, relation);\r\n};\r\n\r\nexport const calcRelativePos = (e, relation) => {\r\n  const x = e.pageX - relation.totalOffsetLeft;\r\n  const y = e.pageY - relation.totalOffsetTop;\r\n  const left = x + \"px\";\r\n  const top = y + \"px\";\r\n  return { left, top };\r\n};\r\n\r\nexport const getTotalLocation = (node) => {\r\n  let totalOffsetLeft = node.offsetLeft;\r\n  let totalOffsetTop = node.offsetTop;\r\n  while (node.offsetParent) {\r\n    node = node.offsetParent;\r\n\r\n    totalOffsetLeft += node.offsetLeft;\r\n    totalOffsetTop += node.offsetTop;\r\n  }\r\n  return { totalOffsetLeft, totalOffsetTop };\r\n};\r\n","import { useReducer } from \"react\";\r\n\r\nimport calcPos from \"./calcPos\";\r\n\r\nexport default () => {\r\n  return useReducer(reducer, []);\r\n};\r\n\r\nfunction reducer(memeTexts, action) {\r\n  switch (action.type) {\r\n    case \"addText\":\r\n      return addText(memeTexts, action);\r\n    case \"setText\":\r\n      return setText(memeTexts, action);\r\n    case \"removeText\":\r\n      return removeText(memeTexts, action);\r\n    case \"changeTextStyle\":\r\n      return changeTextStyle(memeTexts, action);\r\n    case \"changePosition\":\r\n      return changePosition(memeTexts, action);\r\n    case \"onFocus\":\r\n      return onFocus(memeTexts, action);\r\n    default:\r\n      console.log(\"default\");\r\n      break;\r\n  }\r\n}\r\n\r\nexport const addText = (memeTexts, { event }) => {\r\n  const newMemeText = getNewMemeText(event);\r\n  return [...memeTexts.map((v) => ({ ...v, focus: false })), newMemeText];\r\n};\r\n\r\nexport const removeText = (memeTexts, { id }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  return [...memeTexts.slice(0, index), ...memeTexts.slice(index + 1)];\r\n};\r\n\r\nconst findIndexById = (id, arr) => {\r\n  return (\r\n    [0, ...arr].reduce(\r\n      (total, next, index) => (id === next.id && index) || total\r\n    ) - 1\r\n  );\r\n};\r\n\r\nexport const setText = (memeTexts, { id, newText }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  arr[index].text = newText;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nexport const onFocus = (memeTexts, { id }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  arr[index].new = false;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nexport const changeTextStyle = (memeTexts, { id, prop, value }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  if (prop === \"fontSize\") value = parseInt(value);\r\n  arr[index].style[prop] = value;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nexport const changePosition = (memeTexts, { id, newPos }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  arr[index].style.left = newPos.left;\r\n  arr[index].style.top = newPos.top;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nlet id = 0;\r\n\r\nconst getNewMemeText = (e) => {\r\n  const result = calcPos(e);\r\n  const new_MemeText = {\r\n    id: id++,\r\n    text: \"text\",\r\n    style: {\r\n      display: \"block\",\r\n      position: \"absolute\",\r\n      zIndex: \"100\",\r\n      color: \"white\",\r\n      cols: \"4\",\r\n      fontSize: 30,\r\n      resize: \"none\",\r\n      borderWidth: \"0px\",\r\n      borderColor: \"transparent\",\r\n      backgroundColor: \"transparent\",\r\n      transform: \"\",\r\n      left: result.left,\r\n      top: result.top,\r\n    },\r\n    new: true,\r\n    focus: true,\r\n  };\r\n\r\n  return new_MemeText;\r\n};\r\n","import React, { useRef, useEffect, useContext } from \"react\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\nimport { calcRelativePos } from \"../calcPos\";\r\n\r\nexport default React.forwardRef(({ element }, ref) => {\r\n  const { reduceMemeTexts, offset } = useContext(MemeTextsContext);\r\n  const { text, style, id } = element;\r\n\r\n  const expandWithText = (e) => {\r\n    const max = e.target.value\r\n      .split(\"\\n\")\r\n      .map((x) => x.length)\r\n      .reduce((total, num) => Math.max(total, num));\r\n    e.target.style.width = max + 2 + \"ch\";\r\n  };\r\n\r\n  const adjustRows = (e) =>\r\n    (e.target.rows = Math.max(1, e.target.value.split(\"\\n\").length));\r\n\r\n  const onChange = (e) => {\r\n    adjustRows(e);\r\n    expandWithText(e);\r\n    reduceMemeTexts({ type: \"setText\", newText: e.target.value, id });\r\n  };\r\n\r\n  const onDrag = (e) => {\r\n    reduceMemeTexts({\r\n      type: \"changePosition\",\r\n      id,\r\n      newPos: calcRelativePos(e, offset),\r\n    });\r\n  };\r\n\r\n  const focusedMemeText = useRef();\r\n\r\n  useEffect(() => {\r\n    focusedMemeText.current.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <textarea\r\n      draggable=\"true\"\r\n      onFocus={() => reduceMemeTexts({ type: \"onFocus\", id })}\r\n      onDrag={onDrag}\r\n      onDragEnd={onDrag}\r\n      type=\"text\"\r\n      onChange={onChange}\r\n      value={text}\r\n      style={style}\r\n      ref={focusedMemeText}\r\n      rows=\"1\"\r\n      cols=\"4\"\r\n    />\r\n  );\r\n});\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\n\r\nexport default ({ image, children }) => {\r\n  const { reduceMemeTexts } = useContext(MemeTextsContext);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: \"url(\" + image.src + \")\",\r\n        height: image.height + \"px\",\r\n        width: image.width + \"px\",\r\n        position: \"relative\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"contain\",\r\n      }}\r\n    >\r\n      <div\r\n        onClick={(event) => {\r\n          reduceMemeTexts({\r\n            type: \"addText\",\r\n            event: {\r\n              pageX: event.pageX,\r\n              target: event.target,\r\n              pageY: event.pageY,\r\n            },\r\n          });\r\n        }}\r\n        style={{ width: \"inherit\", height: \"inherit\" }}\r\n      ></div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import Meme from \"./Meme\";\r\n\r\nexport default Meme;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\n\r\nimport MemeText from \"./MemeText\";\r\nimport MemeImage from \"./MemeImage\";\r\n\r\nexport default React.forwardRef(({ onImageClick, image }, ref) => {\r\n  const { memeTexts } = useContext(MemeTextsContext);\r\n\r\n  const MemeTexts = memeTexts.map((element, i) => (\r\n    <MemeText key={i} element={element} />\r\n  ));\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <MemeImage image={image} onClick={onImageClick}>\r\n        {MemeTexts}\r\n      </MemeImage>\r\n    </div>\r\n  );\r\n});\r\n\r\n/*Forward ref makes it possible to forward the ref to the component*/\r\n","import domeToImage from \"dom-to-image\";\r\n\r\nfunction downloadImg(node, memeName) {\r\n  domeToImage\r\n    .toPng(node)\r\n    .then(function (dataUrl) {\r\n      downloadMeme(dataUrl, memeName);\r\n    })\r\n    .catch(function (error) {\r\n      console.error(\"oops, something went wrong!\", error);\r\n    });\r\n}\r\n\r\nfunction downloadMeme(dataUrl, name) {\r\n  var link = document.createElement(\"a\");\r\n  link.download = (name && name + \".jpg\") || \"meme.jpg\";\r\n  link.href = dataUrl;\r\n  link.click();\r\n}\r\n\r\nexport default downloadImg;\r\n","import MemeTextOptions from \"./MemeTextOptions\";\r\n\r\nexport default MemeTextOptions;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport { MemeTextsContext } from \"../../index\";\r\n\r\nexport default ({ memeText }) => {\r\n  const { reduceMemeTexts } = useContext(MemeTextsContext);\r\n  return (\r\n    <>\r\n      <div>\r\n        <h5 className={styles.headline}>\r\n          {memeText.text}\r\n          <img\r\n            className={styles.removeButton}\r\n            src=\"/memeCreator/src/icon/remove.png\"\r\n            onClick={() =>\r\n              reduceMemeTexts({ type: \"removeText\", id: memeText.id })\r\n            }\r\n            alt=\"remove\"\r\n          />\r\n        </h5>\r\n      </div>\r\n      <div>\r\n        {[\r\n          \"color\",\r\n          \"backgroundColor\",\r\n          \"fontSize\",\r\n          \"transform\",\r\n          \"textTransform\",\r\n        ].map((propName, i) => (\r\n          <div key={i}>\r\n            <label htmlFor={i + \"propName\"}>Set css {propName}</label>\r\n            <br />\r\n            <input\r\n              id={i + \"propName\"}\r\n              value={memeText.style[propName]}\r\n              onChange={(e) =>\r\n                reduceMemeTexts({\r\n                  type: \"changeTextStyle\",\r\n                  id: memeText.id,\r\n                  prop: propName,\r\n                  value: e.target.value,\r\n                })\r\n              }\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import Options from \"./Options\";\r\n\r\nexport default Options;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport downloadImg from \"../../downloadImg\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\n\r\nimport MemeTextOptions from \"./MemeTextOptions\";\r\n\r\nexport default function Options({ memeImageRef, getImage }) {\r\n  const { memeTexts } = useContext(MemeTextsContext);\r\n  return (\r\n    <div className={styles.options}>\r\n      <div className={styles.memeTextsButtons}>\r\n        {memeTexts\r\n          .filter((x) => x.focus)\r\n          .map((memeText, i) => (\r\n            <MemeTextOptions key={i} memeText={memeText} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport useMemeTextsReducer from \"./MemeTextState\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport Meme from \"./Meme\";\r\n\r\nimport useImage from \"../useImage\";\r\n\r\nimport Options from \"./Options\";\r\n\r\nimport { getTotalLocation } from \"./calcPos\";\r\n\r\nexport const MemeTextsContext = React.createContext([]);\r\n\r\nexport default React.forwardRef(\r\n  ({ selectedMeme, image, getImage, setImage }, imageNodeRef) => {\r\n    const [memeTexts, reduceMemeTexts] = useMemeTextsReducer();\r\n\r\n    const [offset, setOffSet] = useState({\r\n      totalOffsetLeft: 0,\r\n      totalOffsetTop: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n      if (imageNodeRef.current) {\r\n        setOffSet(getTotalLocation(imageNodeRef.current));\r\n      }\r\n    }, [memeTexts]);\r\n\r\n    return (\r\n      <div className={styles.bodyContainer}>\r\n        <MemeTextsContext.Provider\r\n          value={{ memeTexts: memeTexts, reduceMemeTexts, offset }}\r\n        >\r\n          <Meme ref={imageNodeRef} image={image} />\r\n          <Options memeImageRef={imageNodeRef} getImage={getImage} />\r\n        </MemeTextsContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import FreeStyleMeme, { MemeTextsContext } from \"./FreeStyleMeme\";\r\n\r\nexport default FreeStyleMeme;\r\n\r\nexport { MemeTextsContext };\r\n","import React, { useState } from \"react\";\r\nimport styles from \"./index.module.css\";\r\nimport downloadImg from \"../downloadImg\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Nav = ({ imageNodeRef, getImage, memeName }) => {\r\n  const [goHome, setGoHome] = useState(false);\r\n\r\n  return (\r\n    <div className={styles.navContainer}>\r\n      {goHome && <Redirect to=\"/memeCreator/\"></Redirect>}\r\n      <button onClick={() => setGoHome(!goHome)}>Home</button>\r\n      <label htmlFor=\"files\" className={styles.Button}>\r\n        Upload an Image\r\n      </label>\r\n      <input\r\n        id=\"files\"\r\n        type=\"file\"\r\n        name=\"load image\"\r\n        accept=\"image/png, image/jpeg\"\r\n        onChange={getImage}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      <button\r\n        className={styles.Button}\r\n        onClick={() => {\r\n          downloadImg(imageNodeRef.current, memeName);\r\n        }}\r\n      >\r\n        Download Meme\r\n      </button>\r\n      <a>Share</a>\r\n      <a>Sign in</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport TextImage from \"./TextImage\";\r\n\r\nimport FreeStyleMeme from \"./FreeStyleMeme\";\r\n\r\nimport Nav from \"./Nav\";\r\n\r\nimport useImage from \"./useImage\";\r\n\r\nconst nums = Math.floor(Math.random() * 100);\r\n\r\nexport default () => {\r\n  const [image, getImage, setImage] = useImage();\r\n  const { memeType } = useParams();\r\n  // freestyle === FreeStyleMeme and rest can be TextImage\r\n  const [meme, setMeme] = useState([]);\r\n  const [selectedMeme, setSelectedMeme] = useState();\r\n  const [nameMeme, setNameMeme] = useState(\"meme\");\r\n  useEffect(() => {\r\n    fetch(\" https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setMeme(\r\n          result.data.memes.map((x) => {\r\n            const img = new Image();\r\n            img.src = x.url;\r\n            const MAX_SIZE = 500;\r\n            if (img.height > MAX_SIZE || img.width > MAX_SIZE) {\r\n              const ratio = img.height / img.width;\r\n\r\n              if (img.height > img.width) {\r\n                img.height = MAX_SIZE;\r\n                img.width = MAX_SIZE / ratio;\r\n              } else {\r\n                img.width = MAX_SIZE;\r\n                img.height = MAX_SIZE * ratio;\r\n              }\r\n            }\r\n\r\n            return img;\r\n          })\r\n        ); // <-- this is an array of urls\r\n      })\r\n      .catch((error) => {});\r\n  }, []);\r\n  const handleMemeSelector = (e) => {\r\n    setSelectedMeme({\r\n      src: e.target.src,\r\n      height: e.target.height * 5,\r\n      width: e.target.width * 5,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedMeme) {\r\n      setImage(selectedMeme);\r\n    }\r\n  }, [selectedMeme]);\r\n\r\n  const imageNodeRef = useRef();\r\n\r\n  return (\r\n    <div className={styles.editor}>\r\n      <Nav\r\n        className={styles.nav}\r\n        imageNodeRef={imageNodeRef}\r\n        getImage={getImage}\r\n        memeName={nameMeme}\r\n      ></Nav>\r\n      <div className={styles.header}>\r\n        <h3>Make Your Own Meme! </h3>\r\n      </div>\r\n      <div className={styles.egMemeContainer}>\r\n        {meme.slice(nums, nums + 6).map((img, i) => (\r\n          <img\r\n            key={i}\r\n            className={styles.imgMeme}\r\n            onClick={handleMemeSelector}\r\n            src={img.src}\r\n            style={{\r\n              width: img.width * 0.2 + \"px\",\r\n              height: img.height * 0.2 + \"px\",\r\n            }}\r\n            alt=\"img\"\r\n          ></img>\r\n        ))}\r\n      </div>\r\n\r\n      <div className={styles.bodyContainer}>\r\n        <label htmlFor=\"inp\"> Meme Name: </label>\r\n        <input\r\n          id=\"inp\"\r\n          type=\"text\"\r\n          value={nameMeme}\r\n          onChange={(e) => {\r\n            setNameMeme(e.target.value);\r\n          }}\r\n        />\r\n        {memeType === \"freestyle\" && (\r\n          <FreeStyleMeme\r\n            ref={imageNodeRef}\r\n            image={image}\r\n            getImage={getImage}\r\n            setImage={setImage}\r\n            selectedMeme={selectedMeme}\r\n          />\r\n        )}\r\n        {memeType !== \"freestyle\" && (\r\n          <TextImage\r\n            ref={imageNodeRef}\r\n            image={image}\r\n            getImage={getImage}\r\n            setImage={setImage}\r\n            selectedMeme={selectedMeme}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [image, setImage] = useState({ src: \"\" });\r\n\r\n  const angryImg = \"/memeCreator/images/AngrySection.jpeg\";\r\n\r\n  const resizeImg = (img) => {\r\n    setTimeout(() => {\r\n      const MAX_SIZE = 500;\r\n      if (img.height > MAX_SIZE || img.width > MAX_SIZE) {\r\n        const ratio = img.height / img.width;\r\n\r\n        if (img.height > img.width) {\r\n          img.height = MAX_SIZE;\r\n          img.width = MAX_SIZE / ratio;\r\n        } else {\r\n          img.width = MAX_SIZE;\r\n          img.height = MAX_SIZE * ratio;\r\n        }\r\n      }\r\n      setTimeout(() => {\r\n        setImage(img);\r\n      }, 0);\r\n    });\r\n  };\r\n\r\n  const img = new Image();\r\n  img.src = angryImg;\r\n\r\n  useEffect(() => {\r\n    resizeImg(img);\r\n  }, []);\r\n\r\n  const getImage = (e) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      img.src = e.target.result;\r\n      console.log(img.height);\r\n      resizeImg(img);\r\n    };\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  };\r\n  return [image, getImage, setImage];\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport IntroPage from \"./components/IntroPage\";\r\nimport MemeEditor from \"./components/MemeEditor\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/memeCreator/:memeType\">\r\n          <MemeEditor />\r\n        </Route>\r\n        <Route path=\"/memeCreator\">\r\n          <IntroPage />\r\n        </Route>\r\n        <Route path=\"*\">\r\n          <Redirect to=\"/memeCreator\"></Redirect>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"ColorPicker_bodyContainer__3T7Ny\",\"Button\":\"ColorPicker_Button__cSZSI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"Nav_navContainer__2DiNd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"Options_options__5q3gg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"MemeTextOptions_headline__ugVwS\",\"removeButton\":\"MemeTextOptions_removeButton__1RejA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"TextImage_bodyContainer__2eZhu\",\"memeContainer\":\"TextImage_memeContainer__1VIBd\",\"memeImage\":\"TextImage_memeImage__3Xo2G\",\"fontStyleContainer\":\"TextImage_fontStyleContainer__2pW-U\",\"textBottom\":\"TextImage_textBottom__33Coj\",\"textTop\":\"TextImage_textTop__1T53J\",\"options\":\"TextImage_options__21MDm\",\"styleOptions\":\"TextImage_styleOptions__3K-AI\",\"Button\":\"TextImage_Button__2jUhz\",\"inp\":\"TextImage_inp__1EQ_5\",\"label\":\"TextImage_label__25c6R\",\"focusBg\":\"TextImage_focusBg__3JZZE\"};"],"sourceRoot":""}