{"version":3,"sources":["components/MemeEditor/TextImage/ColorPicker/index.module.css","components/MemeEditor/FreeStyleMeme/index.module.css","components/MemeEditor/TextImage/FontButtons/index.module.css","components/MemeTypes/index.module.css","components/MemeEditor/index.module.css","components/IntroPage/index.js","components/MemeEditor/downloadImg.js","components/MemeEditor/useImage.js","components/MemeEditor/TextImage/FontButtons/index.js","components/MemeEditor/TextImage/ColorPicker/index.js","components/MemeEditor/TextImage/index.js","components/MemeEditor/FreeStyleMeme/calcPos.js","components/MemeEditor/FreeStyleMeme/MemeTextState.js","components/MemeEditor/FreeStyleMeme/Meme/MemeText.js","components/MemeEditor/FreeStyleMeme/Meme/MemeImage.js","components/MemeEditor/FreeStyleMeme/Meme/index.js","components/MemeEditor/FreeStyleMeme/Meme/Meme.js","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/index.js","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/MemeTextOptions.js","components/MemeEditor/FreeStyleMeme/Options/index.js","components/MemeEditor/FreeStyleMeme/Options/Options.js","components/MemeEditor/FreeStyleMeme/FreeStyleMeme.js","components/MemeEditor/FreeStyleMeme/index.js","components/MemeEditor/index.js","components/MemeTypes/index.js","App.js","serviceWorker.js","index.js","components/IntroPage/intropage.module.css","components/MemeEditor/TextImage/index.module.css","components/MemeEditor/FreeStyleMeme/Options/index.module.css","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/index.module.css"],"names":["module","exports","useState","meme","setMeme","useEffect","fetch","then","response","json","result","console","log","data","memes","map","x","url","catch","error","className","styles","component","to","Link","imgContainer","slice","src","alt","downloadImg","node","domeToImage","toPng","dataUrl","link","document","createElement","download","href","click","downloadMeme","image","setImage","resizeImg","img","setTimeout","height","width","ratio","Image","e","reader","FileReader","onload","target","readAsDataURL","files","FontButtons","props","styleOptions","fontButtonContainer","Button","onClick","setFont","style","fontFamily","fontSize","sizeButtons","setSize","letterSize","ColorPicker","showColorPicker","setShowColorPicker","color","currentColor","onChange","updatedColor","setColor","hex","selectedMeme","text","inner","topText","setTopText","bottomText","setBottomText","useImage","getImage","fontText","setFontText","setFontSize","textColor","setTextColor","getInnerStyle","font","SizeOfFont","display","getOuterStyle","backgroundColor","bodyContainer","memeContainer","textTop","textBottom","options","htmlFor","inp","id","type","value","label","focusBg","querySelector","memeImage","name","accept","visibility","MemeImage","children","backgroundImage","position","backgroundRepeat","backgroundSize","calcRelativePos","relation","left","pageX","totalOffsetLeft","top","pageY","totalOffsetTop","getTotalLocation","offsetLeft","offsetTop","offsetParent","reducer","memeTexts","action","addText","setText","removeText","changeTextStyle","changePosition","onFocus","event","newMemeText","getNewMemeText","v","focus","index","findIndexById","arr","reduce","total","next","newText","JSON","parse","stringify","new","prop","parseInt","newPos","calcPos","zIndex","cols","resize","borderWidth","borderColor","transform","React","forwardRef","ref","element","useContext","MemeTextsContext","reduceMemeTexts","offset","onDrag","focusedMemeText","useRef","current","draggable","onDragEnd","rows","Math","max","split","length","adjustRows","num","expandWithText","Meme","onImageClick","MemeTexts","i","MemeText","key","MemeTextOptions","memeText","headline","removeButton","propName","Options","memeImageRef","memeTextsButtons","filter","createContext","FreeStyleMeme","useReducer","setOffSet","Provider","nums","floor","random","memeType","useParams","setSelectedMeme","handleMemeSelector","editor","header","egMemeContainer","imgMeme","TextImage","typeContainer","linkMemeTypes","memeTypesImg","App","path","MemeEditor","MemeTypes","IntroPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.22fc7635.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"ColorPicker_Button__cSZSI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"FreeStyleMeme_bodyContainer__eWctY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleOptions\":\"FontButtons_styleOptions__3giQ8\",\"fontButtonContainer\":\"FontButtons_fontButtonContainer__1e5e0\",\"sizeButtons\":\"FontButtons_sizeButtons__3xlc_\",\"Button\":\"FontButtons_Button__2q4u4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"MemeTypes_component__WwhWK\",\"typeContainer\":\"MemeTypes_typeContainer__5-495\",\"linkMemeTypes\":\"MemeTypes_linkMemeTypes__2Tc2p\",\"memeTypesImg\":\"MemeTypes_memeTypesImg__3d3so\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"MemeEditor_editor__2BjEE\",\"header\":\"MemeEditor_header__eMX6P\",\"egMemeContainer\":\"MemeEditor_egMemeContainer__3Q8rE\",\"bodyContainer\":\"MemeEditor_bodyContainer__3Uf20\",\"imgMeme\":\"MemeEditor_imgMeme__1yGOA\"};","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./intropage.module.css\";\r\n\r\nexport default () => {\r\n  const [meme, setMeme] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\" https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        setMeme(result.data.memes.map((x) => x.url)); // <-- this is an array of urls\r\n      })\r\n      .catch((error) => {});\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.component}>\r\n      <br />\r\n      <nav>\r\n        <button>Categories</button>\r\n        <button>Sign In</button>{\" \"}\r\n      </nav>\r\n      <br />\r\n      <h1>Welcome to the Meme creator</h1>\r\n      <br />\r\n      <Link to=\"/memeCreator/memetypes\" className={styles.Link}>\r\n        Get Started\r\n      </Link>\r\n      <br />\r\n      <div className={styles.imgContainer}>\r\n        {meme.slice(0, 20).map((x) => (\r\n          <img src={x} alt=\"img1\"></img>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import domeToImage from \"dom-to-image\";\r\n\r\nfunction downloadImg(node) {\r\n  domeToImage\r\n    .toPng(node)\r\n    .then(function (dataUrl) {\r\n      downloadMeme(dataUrl);\r\n    })\r\n    .catch(function (error) {\r\n      console.error(\"oops, something went wrong!\", error);\r\n    });\r\n}\r\n\r\nfunction downloadMeme(dataUrl) {\r\n  var link = document.createElement(\"a\");\r\n  link.download = \"meme.jpg\";\r\n  link.href = dataUrl;\r\n  link.click();\r\n}\r\n\r\nexport default downloadImg;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [image, setImage] = useState({ src: \"\" });\r\n\r\n  const angryImg = \"/memeCreator/images/AngrySection.jpeg\";\r\n\r\n  const resizeImg = (img) => {\r\n    setTimeout(() => {\r\n      const MAX_SIZE = 500;\r\n      if (img.height > MAX_SIZE || img.width > MAX_SIZE) {\r\n        const ratio = img.height / img.width;\r\n\r\n        if (img.height > img.width) {\r\n          img.height = MAX_SIZE;\r\n          img.width = MAX_SIZE / ratio;\r\n        } else {\r\n          img.width = MAX_SIZE;\r\n          img.height = MAX_SIZE * ratio;\r\n        }\r\n      }\r\n      setTimeout(() => {\r\n        setImage(img);\r\n      }, 0);\r\n    });\r\n  };\r\n\r\n  const img = new Image();\r\n  img.src = angryImg;\r\n\r\n  useEffect(() => {\r\n    resizeImg(img);\r\n  }, []);\r\n\r\n  const getImage = (e) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const img = new Image();\r\n\r\n      img.src = e.target.result;\r\n      resizeImg(img);\r\n    };\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  };\r\n  return [image, getImage, setImage];\r\n};\r\n","import React from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nconst FontButtons = (props) => {\r\n  return (\r\n    <div className={styles.styleOptions}>\r\n      {/* Buttons for the Font family */}\r\n      <div className={styles.fontButtonContainer}>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"Georgia, serif\")}\r\n          style={{\r\n            fontFamily: \"Georgia, serif\",\r\n            fontSize: 15 + \"px\",\r\n          }}\r\n        >\r\n          Georgia\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"Arial Black\")}\r\n          style={{ fontFamily: \"Arial Black\", fontSize: 13 + \"px\" }}\r\n        >\r\n          Arial Black\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"monospace\")}\r\n          style={{ fontFamily: \"monospace\" }}\r\n        >\r\n          Monospace\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"Comic Sans MS\")}\r\n          style={{ fontFamily: \"Comic Sans MS\" }}\r\n        >\r\n          Comic Sans\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setFont(\"cursive\")}\r\n          style={{ fontFamily: \"cursive\" }}\r\n        >\r\n          Cursive\r\n        </button>\r\n      </div>\r\n\r\n      {/* Buttons for the size */}\r\n      <div className={styles.sizeButtons}>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setSize(props.letterSize + 1)}\r\n          style={{ fontSize: \"15px\" }}\r\n        >\r\n          A+\r\n        </button>\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => props.setSize(props.letterSize - 1)}\r\n          style={{ fontSize: \"10px\" }}\r\n        >\r\n          A-\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FontButtons;\r\n","import React, { useState } from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport styles from \"./index.module.css\";\r\n\r\nconst ColorPicker = (props) => {\r\n  const [showColorPicker, setShowColorPicker] = useState(false);\r\n  return (\r\n    <div>\r\n      <button\r\n        className={styles.Button}\r\n        onClick={() =>\r\n          setShowColorPicker((showColorPicker) => !showColorPicker)\r\n        }\r\n      >\r\n        {showColorPicker ? \"Close\" : \"Text Color\"}\r\n      </button>\r\n      {showColorPicker && (\r\n        <ChromePicker\r\n          color={props.currentColor}\r\n          onChange={(updatedColor) => props.setColor(updatedColor.hex)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport downloadImg from \"../downloadImg\";\r\n\r\nimport useImage from \"../useImage\";\r\n\r\nimport FontButtons from \"./FontButtons\";\r\n\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nexport default ({ selectedMeme }) => {\r\n  const [topText, setTopText] = useState({ text: \"top text\", inner: true });\r\n  const [bottomText, setBottomText] = useState({\r\n    text: \"bottom text\",\r\n    inner: true,\r\n  });\r\n\r\n  const [image, getImage, setImage] = useImage();\r\n\r\n  useEffect(() => {\r\n    if (selectedMeme) {\r\n      setImage(selectedMeme);\r\n    }\r\n  }, [selectedMeme]);\r\n\r\n  const [fontText, setFontText] = useState(\"\");\r\n\r\n  const [fontSize, setFontSize] = useState(12);\r\n\r\n  const [textColor, setTextColor] = useState(\"black\");\r\n\r\n  const getInnerStyle = (text, font, SizeOfFont) => {\r\n    return {\r\n      display: text.inner ? \"block\" : \"none\",\r\n      color: textColor,\r\n      fontFamily: font,\r\n      fontSize: SizeOfFont,\r\n    };\r\n  };\r\n  // Function that create the top text section\r\n  const getOuterStyle = (text, font, SizeOfFont) => {\r\n    return {\r\n      display: !text.inner ? \"block\" : \"none\",\r\n      color: textColor,\r\n      backgroundColor: text.inner ? \"transparent\" : \"white\",\r\n      fontFamily: font,\r\n      fontSize: SizeOfFont,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className={styles.bodyContainer}>\r\n      <div\r\n        className={styles.memeContainer}\r\n        style={{\r\n          height: image.height + \"px\",\r\n          width: image.width + \"px\",\r\n        }}\r\n      >\r\n        <div\r\n          style={getOuterStyle(topText, fontText, fontSize)}\r\n          className={styles.textTop}\r\n        >\r\n          {topText.text}\r\n        </div>\r\n\r\n        <MemeImage image={image} onClick={() => {}}>\r\n          <div\r\n            style={getInnerStyle(topText, fontText, fontSize)}\r\n            className={styles.textTop}\r\n          >\r\n            {topText.text}\r\n          </div>\r\n          {/* This span prevents that the bottom text to go up when the top text is outside of the image */}\r\n          <span></span>\r\n\r\n          {/* Inside Bottom text */}\r\n          <div\r\n            style={getInnerStyle(bottomText, fontText, fontSize)}\r\n            className={styles.textBottom}\r\n          >\r\n            {bottomText.text}\r\n          </div>\r\n        </MemeImage>\r\n        <div\r\n          style={getOuterStyle(bottomText, fontText, fontSize)}\r\n          className={styles.textBottom}\r\n        >\r\n          {bottomText.text}\r\n        </div>\r\n      </div>\r\n      <div className={styles.options}>\r\n        {/* Text Input. Top and Bottom */}\r\n        <label htmlFor=\"inp\" className={styles.inp}>\r\n          <input\r\n            id=\"inp\"\r\n            type=\"text\"\r\n            value={topText.text}\r\n            onChange={(e) => {\r\n              setTopText({ ...topText, text: e.target.value });\r\n            }}\r\n          />\r\n          <span className={styles.label}>Top Text</span>\r\n          <span className={styles.focusBg}></span>\r\n        </label>\r\n        <label htmlFor=\"inp2\" className={styles.inp}>\r\n          <input\r\n            id=\"inp2\"\r\n            type=\"text\"\r\n            value={bottomText.text}\r\n            onChange={(e) => {\r\n              setBottomText({ ...bottomText, text: e.target.value });\r\n            }}\r\n          />\r\n          <span className={styles.label}>Bottom Text</span>\r\n          <span className={styles.focusBg}></span>\r\n        </label>\r\n\r\n        {/* Button to Change Top text position */}\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => setTopText({ ...topText, inner: !topText.inner })}\r\n        >\r\n          Top in/out\r\n        </button>\r\n\r\n        {/* Button to Change Bottom text position */}\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() =>\r\n            setBottomText({ ...bottomText, inner: !bottomText.inner })\r\n          }\r\n        >\r\n          bottom in/out\r\n        </button>\r\n\r\n        <button\r\n          className={styles.Button}\r\n          onClick={() => {\r\n            const node = document.querySelector(\".\" + styles.memeImage);\r\n\r\n            downloadImg(node);\r\n          }}\r\n        >\r\n          Download Image\r\n        </button>\r\n        <label htmlFor=\"files\" className={styles.Button}>\r\n          Upload an Image\r\n        </label>\r\n        <input\r\n          id=\"files\"\r\n          type=\"file\"\r\n          name=\"load image\"\r\n          accept=\"image/png, image/jpeg\"\r\n          onChange={getImage}\r\n          style={{ visibility: \"hidden\" }}\r\n        />\r\n\r\n        <FontButtons\r\n          setFont={setFontText}\r\n          setSize={setFontSize}\r\n          letterSize={fontSize}\r\n        ></FontButtons>\r\n\r\n        <ColorPicker setColor={setTextColor} currentColor={textColor} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MemeImage = ({ image, children }) => {\r\n  return (\r\n    <div\r\n      className={styles.memeImage}\r\n      style={{\r\n        backgroundImage: \"url(\" + image.src + \")\",\r\n        height: image.height + \"px\",\r\n        width: image.width + \"px\",\r\n        position: \"relative\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"contain\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","export default (e) => {\r\n  const relation = getTotalLocation(e.target);\r\n  return calcRelativePos(e, relation);\r\n};\r\n\r\nexport const calcRelativePos = (e, relation) => {\r\n  const x = e.pageX - relation.totalOffsetLeft;\r\n  const y = e.pageY - relation.totalOffsetTop;\r\n  const left = x + \"px\";\r\n  const top = y + \"px\";\r\n  return { left, top };\r\n};\r\n\r\nexport const getTotalLocation = (node) => {\r\n  let totalOffsetLeft = node.offsetLeft;\r\n  let totalOffsetTop = node.offsetTop;\r\n  while (node.offsetParent) {\r\n    node = node.offsetParent;\r\n\r\n    totalOffsetLeft += node.offsetLeft;\r\n    totalOffsetTop += node.offsetTop;\r\n  }\r\n  return { totalOffsetLeft, totalOffsetTop };\r\n};\r\n","import { useReducer } from \"react\";\r\n\r\nimport calcPos from \"./calcPos\";\r\n\r\nexport default () => {\r\n  return useReducer(reducer, []);\r\n};\r\n\r\nfunction reducer(memeTexts, action) {\r\n  switch (action.type) {\r\n    case \"addText\":\r\n      return addText(memeTexts, action);\r\n    case \"setText\":\r\n      return setText(memeTexts, action);\r\n    case \"removeText\":\r\n      return removeText(memeTexts, action);\r\n    case \"changeTextStyle\":\r\n      return changeTextStyle(memeTexts, action);\r\n    case \"changePosition\":\r\n      return changePosition(memeTexts, action);\r\n    case \"onFocus\":\r\n      return onFocus(memeTexts, action);\r\n    default:\r\n      console.log(\"default\");\r\n      break;\r\n  }\r\n}\r\n\r\nexport const addText = (memeTexts, { event }) => {\r\n  const newMemeText = getNewMemeText(event);\r\n  return [...memeTexts.map((v) => ({ ...v, focus: false })), newMemeText];\r\n};\r\n\r\nexport const removeText = (memeTexts, { id }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  return [...memeTexts.slice(0, index), ...memeTexts.slice(index + 1)];\r\n};\r\n\r\nconst findIndexById = (id, arr) => {\r\n  return (\r\n    [0, ...arr].reduce(\r\n      (total, next, index) => (id === next.id && index) || total\r\n    ) - 1\r\n  );\r\n};\r\n\r\nexport const setText = (memeTexts, { id, newText }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  arr[index].text = newText;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nexport const onFocus = (memeTexts, { id }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  arr[index].new = false;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nexport const changeTextStyle = (memeTexts, { id, prop, value }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  if (prop === \"fontSize\") value = parseInt(value);\r\n  arr[index].style[prop] = value;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nexport const changePosition = (memeTexts, { id, newPos }) => {\r\n  const index = findIndexById(id, memeTexts);\r\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\r\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\r\n  arr[index].style.left = newPos.left;\r\n  arr[index].style.top = newPos.top;\r\n  arr[index].focus = true;\r\n  return [...arr];\r\n};\r\n\r\nlet id = 0;\r\n\r\nconst getNewMemeText = (e) => {\r\n  const result = calcPos(e);\r\n  const new_MemeText = {\r\n    id: id++,\r\n    text: \"text\",\r\n    style: {\r\n      display: \"block\",\r\n      position: \"absolute\",\r\n      zIndex: \"100\",\r\n      color: \"white\",\r\n      cols: \"4\",\r\n      fontSize: 30,\r\n      resize: \"none\",\r\n      borderWidth: \"0px\",\r\n      borderColor: \"transparent\",\r\n      backgroundColor: \"transparent\",\r\n      transform: \"\",\r\n      left: result.left,\r\n      top: result.top,\r\n    },\r\n    new: true,\r\n    focus: true,\r\n  };\r\n\r\n  return new_MemeText;\r\n};\r\n","import React, { useRef, useEffect, useContext } from \"react\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\nimport { calcRelativePos } from \"../calcPos\";\r\n\r\nexport default React.forwardRef(({ element }, ref) => {\r\n  const { reduceMemeTexts, offset } = useContext(MemeTextsContext);\r\n  const { text, style, id } = element;\r\n\r\n  const expandWithText = (e) => {\r\n    const max = e.target.value\r\n      .split(\"\\n\")\r\n      .map((x) => x.length)\r\n      .reduce((total, num) => Math.max(total, num));\r\n    e.target.style.width = max + 2 + \"ch\";\r\n  };\r\n\r\n  const adjustRows = (e) =>\r\n    (e.target.rows = Math.max(1, e.target.value.split(\"\\n\").length));\r\n\r\n  const onChange = (e) => {\r\n    adjustRows(e);\r\n    expandWithText(e);\r\n    reduceMemeTexts({ type: \"setText\", newText: e.target.value, id });\r\n  };\r\n\r\n  const onDrag = (e) => {\r\n    reduceMemeTexts({\r\n      type: \"changePosition\",\r\n      id,\r\n      newPos: calcRelativePos(e, offset),\r\n    });\r\n  };\r\n\r\n  const focusedMemeText = useRef();\r\n\r\n  useEffect(() => {\r\n    focusedMemeText.current.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <textarea\r\n      draggable=\"true\"\r\n      onFocus={() => reduceMemeTexts({ type: \"onFocus\", id })}\r\n      onDrag={onDrag}\r\n      onDragEnd={onDrag}\r\n      type=\"text\"\r\n      onChange={onChange}\r\n      value={text}\r\n      style={style}\r\n      ref={focusedMemeText}\r\n      rows=\"1\"\r\n      cols=\"4\"\r\n    />\r\n  );\r\n});\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\n\r\nexport default ({ image, children }) => {\r\n  const { reduceMemeTexts } = useContext(MemeTextsContext);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundImage: \"url(\" + image.src + \")\",\r\n        height: image.height + \"px\",\r\n        width: image.width + \"px\",\r\n        position: \"relative\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"contain\",\r\n      }}\r\n    >\r\n      <div\r\n        onClick={(event) => {\r\n          reduceMemeTexts({\r\n            type: \"addText\",\r\n            event: {\r\n              pageX: event.pageX,\r\n              target: event.target,\r\n              pageY: event.pageY,\r\n            },\r\n          });\r\n        }}\r\n        style={{ width: \"inherit\", height: \"inherit\" }}\r\n      ></div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import Meme from \"./Meme\";\r\n\r\nexport default Meme;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\n\r\nimport MemeText from \"./MemeText\";\r\nimport MemeImage from \"./MemeImage\";\r\n\r\nexport default React.forwardRef(({ onImageClick, image }, ref) => {\r\n  const { memeTexts } = useContext(MemeTextsContext);\r\n\r\n  const MemeTexts = memeTexts.map((element, i) => (\r\n    <MemeText key={i} element={element} />\r\n  ));\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <MemeImage image={image} onClick={onImageClick}>\r\n        {MemeTexts}\r\n      </MemeImage>\r\n    </div>\r\n  );\r\n});\r\n\r\n/*Forward ref makes it possible to forward the ref to the component*/\r\n","import MemeTextOptions from \"./MemeTextOptions\";\r\n\r\nexport default MemeTextOptions;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport { MemeTextsContext } from \"../../index\";\r\n\r\nexport default ({ memeText }) => {\r\n  const { reduceMemeTexts } = useContext(MemeTextsContext);\r\n  return (\r\n    <>\r\n      <div>\r\n        <h5 className={styles.headline}>\r\n          {memeText.text}\r\n          <img\r\n            className={styles.removeButton}\r\n            src=\"/memeCreator/src/icon/remove.png\"\r\n            onClick={() =>\r\n              reduceMemeTexts({ type: \"removeText\", id: memeText.id })\r\n            }\r\n            alt=\"remove\"\r\n          />\r\n        </h5>\r\n      </div>\r\n      <div>\r\n        {[\r\n          \"color\",\r\n          \"backgroundColor\",\r\n          \"fontSize\",\r\n          \"transform\",\r\n          \"textTransform\",\r\n        ].map((propName, i) => (\r\n          <div key={i}>\r\n            <label htmlFor={i + \"propName\"}>Set css {propName}</label>\r\n            <br />\r\n            <input\r\n              id={i + \"propName\"}\r\n              value={memeText.style[propName]}\r\n              onChange={(e) =>\r\n                reduceMemeTexts({\r\n                  type: \"changeTextStyle\",\r\n                  id: memeText.id,\r\n                  prop: propName,\r\n                  value: e.target.value,\r\n                })\r\n              }\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import Options from \"./Options\";\r\n\r\nexport default Options;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport downloadImg from \"../../downloadImg\";\r\n\r\nimport { MemeTextsContext } from \"../index\";\r\n\r\nimport MemeTextOptions from \"./MemeTextOptions\";\r\n\r\nexport default function Options({ memeImageRef, getImage }) {\r\n  const { memeTexts } = useContext(MemeTextsContext);\r\n  return (\r\n    <div className={styles.options}>\r\n      <button\r\n        className=\"download\"\r\n        onClick={(e) => downloadImg(memeImageRef.current)}\r\n      >\r\n        Download Image\r\n      </button>\r\n      <input\r\n        id=\"files\"\r\n        type=\"file\"\r\n        name=\"load image\"\r\n        accept=\"image/png, image/jpeg\"\r\n        onChange={getImage}\r\n      />\r\n      <div className={styles.memeTextsButtons}>\r\n        {memeTexts\r\n          .filter((x) => x.focus)\r\n          .map((memeText, i) => (\r\n            <MemeTextOptions key={i} memeText={memeText} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport useMemeTextsReducer from \"./MemeTextState\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport Meme from \"./Meme\";\r\n\r\nimport useImage from \"../useImage\";\r\n\r\nimport Options from \"./Options\";\r\n\r\nimport { getTotalLocation } from \"./calcPos\";\r\n\r\nexport const MemeTextsContext = React.createContext([]);\r\n\r\nexport default ({ selectedMeme }) => {\r\n  const [memeTexts, reduceMemeTexts] = useMemeTextsReducer();\r\n\r\n  const [image, getImage, setImage] = useImage(selectedMeme);\r\n\r\n  useEffect(() => {\r\n    if (selectedMeme) {\r\n      setImage(selectedMeme);\r\n    }\r\n  }, [selectedMeme, setImage]);\r\n\r\n  const memeImageRef = useRef();\r\n\r\n  const [offset, setOffSet] = useState({\r\n    totalOffsetLeft: 0,\r\n    totalOffsetTop: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (memeImageRef.current) {\r\n      setOffSet(getTotalLocation(memeImageRef.current));\r\n    }\r\n  }, [memeTexts]);\r\n\r\n  return (\r\n    <div className={styles.bodyContainer}>\r\n      <MemeTextsContext.Provider\r\n        value={{ memeTexts: memeTexts, reduceMemeTexts, offset }}\r\n      >\r\n        <Meme ref={memeImageRef} image={image} />\r\n        <Options memeImageRef={memeImageRef} getImage={getImage} />\r\n      </MemeTextsContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","import FreeStyleMeme, { MemeTextsContext } from \"./FreeStyleMeme\";\r\n\r\nexport default FreeStyleMeme;\r\n\r\nexport { MemeTextsContext };\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nimport TextImage from \"./TextImage\";\r\n\r\nimport FreeStyleMeme from \"./FreeStyleMeme\";\r\nconst nums = Math.floor(Math.random() * 100);\r\n\r\nexport default () => {\r\n  const { memeType } = useParams();\r\n  // freestyle === FreeStyleMeme and rest can be TextImage\r\n  const [meme, setMeme] = useState([]);\r\n  const [selectedMeme, setSelectedMeme] = useState();\r\n  useEffect(() => {\r\n    fetch(\" https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        setMeme(\r\n          result.data.memes.map((x) => {\r\n            const img = new Image();\r\n            img.src = x.url;\r\n            const MAX_SIZE = 500;\r\n            if (img.height > MAX_SIZE || img.width > MAX_SIZE) {\r\n              const ratio = img.height / img.width;\r\n\r\n              if (img.height > img.width) {\r\n                img.height = MAX_SIZE;\r\n                img.width = MAX_SIZE / ratio;\r\n              } else {\r\n                img.width = MAX_SIZE;\r\n                img.height = MAX_SIZE * ratio;\r\n              }\r\n            }\r\n\r\n            return img;\r\n          })\r\n        ); // <-- this is an array of urls\r\n      })\r\n      .catch((error) => {});\r\n  }, []);\r\n  const handleMemeSelector = (e) => {\r\n    setSelectedMeme({\r\n      src: e.target.src,\r\n      height: e.target.height * 5,\r\n      width: e.target.width * 5,\r\n    });\r\n  };\r\n  return (\r\n    <div className={styles.editor}>\r\n      <div className={styles.header}>\r\n        <h3>Make Your Own Meme! </h3>\r\n      </div>\r\n      <div className={styles.bodyContainer}>\r\n        <div className={styles.egMemeContainer}>\r\n          {meme.slice(nums, nums + 6).map((img, i) => (\r\n            <img\r\n              key={i}\r\n              className={styles.imgMeme}\r\n              onClick={handleMemeSelector}\r\n              src={img.src}\r\n              style={{\r\n                width: img.width * 0.2 + \"px\",\r\n                height: img.height * 0.2 + \"px\",\r\n              }}\r\n              alt=\"img\"\r\n            ></img>\r\n          ))}\r\n        </div>\r\n        <div>\r\n          {memeType === \"freestyle\" && (\r\n            <FreeStyleMeme selectedMeme={selectedMeme} />\r\n          )}\r\n          {memeType !== \"freestyle\" && (\r\n            <TextImage selectedMeme={selectedMeme} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport styles from \"./index.module.css\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div className={styles.component}>\r\n      <nav>\r\n        <button>Categories</button>\r\n        <button>Sign In</button>{\" \"}\r\n      </nav>\r\n      <h2>This is the memetypes page</h2>\r\n      <br />\r\n      <div className={styles.typeContainer}>\r\n        <Link\r\n          className={styles.linkMemeTypes}\r\n          to=\"/memeCreator/memetypes/textInOfImage\"\r\n        >\r\n          Text in image\r\n          <img\r\n            className={styles.memeTypesImg}\r\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\r\n            alt=\"funny\"\r\n          ></img>\r\n        </Link>\r\n        <Link\r\n          className={styles.linkMemeTypes}\r\n          to=\"/memeCreator/memetypes/freestyle\"\r\n        >\r\n          <h3>Editor 2</h3>\r\n          <img\r\n            className={styles.memeTypesImg}\r\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\r\n            alt=\"serious\"\r\n          ></img>\r\n        </Link>\r\n        <Link\r\n          className={styles.linkMemeTypes}\r\n          to=\"/memeCreator/memetypes/angry\"\r\n        >\r\n          Memetype angry\r\n          <img\r\n            className={styles.memeTypesImg}\r\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\r\n            alt=\"angry\"\r\n          ></img>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport IntroPage from \"./components/IntroPage\";\r\nimport MemeEditor from \"./components/MemeEditor\";\r\n\r\nimport MemeTypes from \"./components/MemeTypes\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/memeCreator/memetypes/:memeType\">\r\n          <MemeEditor />\r\n        </Route>\r\n        <Route path=\"/memeCreator/memetypes\">\r\n          <MemeTypes />\r\n        </Route>\r\n        <Route path=\"/memeCreator\">\r\n          <IntroPage />\r\n        </Route>\r\n        <Route path=\"/\"></Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"intropage_component__2Eph7\",\"Link\":\"intropage_Link__N71EU\",\"imgContainer\":\"intropage_imgContainer__1SqrB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"TextImage_bodyContainer__2eZhu\",\"meme\":\"TextImage_meme__3cy-E\",\"memeImage\":\"TextImage_memeImage__3Xo2G\",\"textBottom\":\"TextImage_textBottom__33Coj\",\"textTop\":\"TextImage_textTop__1T53J\",\"options\":\"TextImage_options__21MDm\",\"styleOptions\":\"TextImage_styleOptions__3K-AI\",\"Button\":\"TextImage_Button__2jUhz\",\"inp\":\"TextImage_inp__1EQ_5\",\"label\":\"TextImage_label__25c6R\",\"focusBg\":\"TextImage_focusBg__3JZZE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"Options_options__5q3gg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"MemeTextOptions_headline__ugVwS\",\"removeButton\":\"MemeTextOptions_removeButton__1RejA\"};"],"sourceRoot":""}