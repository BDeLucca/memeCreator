{"version":3,"sources":["components/MemeEditor/FreeStyleMeme/index.module.css","components/MemeEditor/TextImage/FontButtons/index.module.css","components/MemeTypes/index.module.css","components/MemeEditor/index.module.css","components/IntroPage/index.js","components/MemeEditor/TextImage/FontButtons/index.js","components/MemeEditor/TextImage/ColorPicker/index.js","components/MemeEditor/TextImage/index.js","components/MemeEditor/FreeStyleMeme/calcPos.js","components/MemeEditor/FreeStyleMeme/MemeTextState.js","components/MemeEditor/FreeStyleMeme/Meme/MemeText.js","components/MemeEditor/FreeStyleMeme/Meme/MemeImage.js","components/MemeEditor/FreeStyleMeme/Meme/index.js","components/MemeEditor/FreeStyleMeme/Meme/Meme.js","components/MemeEditor/downloadImg.js","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/index.js","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/MemeTextOptions.js","components/MemeEditor/FreeStyleMeme/Options/index.js","components/MemeEditor/FreeStyleMeme/Options/Options.js","components/MemeEditor/FreeStyleMeme/FreeStyleMeme.js","components/MemeEditor/FreeStyleMeme/index.js","components/MemeEditor/Nav/index.js","components/MemeEditor/index.js","components/MemeEditor/useImage.js","components/MemeTypes/index.js","App.js","serviceWorker.js","index.js","components/IntroPage/intropage.module.css","components/MemeEditor/TextImage/ColorPicker/index.module.css","components/MemeEditor/Nav/index.module.css","components/MemeEditor/FreeStyleMeme/Options/index.module.css","components/MemeEditor/FreeStyleMeme/Options/MemeTextOptions/index.module.css","components/MemeEditor/TextImage/index.module.css"],"names":["module","exports","useState","meme","setMeme","useEffect","fetch","then","response","json","result","console","log","data","memes","map","x","url","catch","error","className","styles","component","to","Link","imgContainer","slice","src","alt","FontButtons","props","styleOptions","fontButtonContainer","Button","onClick","setFont","style","fontFamily","fontSize","sizeButtons","setSize","letterSize","height","ColorPicker","showColorPicker","setShowColorPicker","bodyContainer","ChromePickerContainer","display","color","currentColor","onChange","updatedColor","setColor","hex","React","forwardRef","imageNodeRef","image","setImage","getImage","text","inner","topText","setTopText","bottomText","setBottomText","fontText","setFontText","setFontSize","textColor","setTextColor","getInnerStyle","font","SizeOfFont","getOuterStyle","backgroundColor","memeContainer","width","textTop","MemeImage","ref","textBottom","options","htmlFor","inp","id","type","value","e","target","label","focusBg","fontStyleContainer","children","memeImage","backgroundImage","position","backgroundRepeat","backgroundSize","calcRelativePos","relation","left","pageX","totalOffsetLeft","top","pageY","totalOffsetTop","getTotalLocation","node","offsetLeft","offsetTop","offsetParent","reducer","memeTexts","action","addText","setText","removeText","changeTextStyle","changePosition","onFocus","event","newMemeText","getNewMemeText","v","focus","index","findIndexById","arr","reduce","total","next","newText","JSON","parse","stringify","new","prop","parseInt","newPos","calcPos","zIndex","cols","resize","borderWidth","borderColor","transform","element","useContext","MemeTextsContext","reduceMemeTexts","offset","onDrag","focusedMemeText","useRef","current","draggable","onDragEnd","rows","Math","max","split","length","adjustRows","num","expandWithText","Meme","onImageClick","MemeTexts","i","MemeText","key","downloadImg","memeName","domeToImage","toPng","dataUrl","name","link","document","createElement","download","href","click","downloadMeme","MemeTextOptions","memeText","headline","removeButton","propName","Options","memeImageRef","memeTextsButtons","filter","createContext","FreeStyleMeme","selectedMeme","useReducer","setOffSet","Provider","Nav","goHome","setGoHome","navContainer","accept","nums","floor","random","resizeImg","img","setTimeout","ratio","Image","reader","FileReader","onload","readAsDataURL","files","useImage","memeType","useParams","setSelectedMeme","nameMeme","setNameMeme","handleMemeSelector","editor","nav","header","egMemeContainer","imgMeme","TextImage","typeContainer","linkMemeTypes","memeTypesImg","App","path","MemeEditor","MemeTypes","IntroPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ba2d11b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"FreeStyleMeme_bodyContainer__2hq6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleOptions\":\"FontButtons_styleOptions__1GwGY\",\"fontButtonContainer\":\"FontButtons_fontButtonContainer__3WLZY\",\"sizeButtons\":\"FontButtons_sizeButtons__67_gS\",\"Button\":\"FontButtons_Button__2tFEV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"MemeTypes_component__1k1p0\",\"typeContainer\":\"MemeTypes_typeContainer__1qMtZ\",\"linkMemeTypes\":\"MemeTypes_linkMemeTypes__1-_Bb\",\"memeTypesImg\":\"MemeTypes_memeTypesImg__1auLp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"MemeEditor_editor__3qzpR\",\"nav\":\"MemeEditor_nav__2jvco\",\"header\":\"MemeEditor_header__3OIIM\",\"bodyContainer\":\"MemeEditor_bodyContainer__Jb7Bl\",\"egMemeContainer\":\"MemeEditor_egMemeContainer__29g_j\",\"imgMeme\":\"MemeEditor_imgMeme__1Nxub\"};","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./intropage.module.css\";\n\nexport default () => {\n  const [meme, setMeme] = useState([]);\n  useEffect(() => {\n    fetch(\" https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(result);\n        setMeme(result.data.memes.map((x) => x.url)); // <-- this is an array of urls\n      })\n      .catch((error) => {});\n  }, []);\n\n  return (\n    <div className={styles.component}>\n      <br />\n      <nav>\n        <button>Categories</button>\n        <button>Sign In</button>{\" \"}\n      </nav>\n      <br />\n      <h1>Welcome to the Meme creator</h1>\n      <br />\n      <Link to=\"/memeCreator/memetypes\" className={styles.Link}>\n        Get Started\n      </Link>\n      <br />\n      <div className={styles.imgContainer}>\n        {meme.slice(0, 20).map((x) => (\n          <img src={x} alt=\"img1\"></img>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport styles from \"./index.module.css\";\n\nconst FontButtons = (props) => {\n  return (\n    <div className={styles.styleOptions}>\n      {/* Buttons for the Font family */}\n      <div className={styles.fontButtonContainer}>\n        <button\n          className={styles.Button}\n          onClick={() => props.setFont(\"Georgia, serif\")}\n          style={{\n            fontFamily: \"Georgia, serif\",\n            fontSize: 15 + \"px\",\n          }}\n        >\n          Georgia\n        </button>\n        <button\n          className={styles.Button}\n          onClick={() => props.setFont(\"Arial Black\")}\n          style={{ fontFamily: \"Arial Black\", fontSize: 13 + \"px\" }}\n        >\n          Arial Black\n        </button>\n        <button\n          className={styles.Button}\n          onClick={() => props.setFont(\"monospace\")}\n          style={{ fontFamily: \"monospace\" }}\n        >\n          Monospace\n        </button>\n        <button\n          className={styles.Button}\n          onClick={() => props.setFont(\"Comic Sans MS\")}\n          style={{ fontFamily: \"Comic Sans MS\" }}\n        >\n          Comic Sans\n        </button>\n        <button\n          className={styles.Button}\n          onClick={() => props.setFont(\"cursive\")}\n          style={{ fontFamily: \"cursive\" }}\n        >\n          Cursive\n        </button>\n        {/* Buttons for the size */}\n        <div className={styles.sizeButtons}>\n          <button\n            className={styles.Button}\n            onClick={() => props.setSize(props.letterSize + 1)}\n            style={{ fontSize: \"15px\", height: \"35px\" }}\n          >\n            A+\n          </button>\n          <button\n            className={styles.Button}\n            onClick={() => props.setSize(props.letterSize - 1)}\n            style={{ fontSize: \"10px\", height: \"35px\" }}\n          >\n            A-\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FontButtons;\n","import React, { useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport styles from \"./index.module.css\";\n\nconst ColorPicker = (props) => {\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  return (\n    <div className={styles.bodyContainer}>\n      <button\n        className={styles.Button}\n        onClick={() =>\n          setShowColorPicker((showColorPicker) => !showColorPicker)\n        }\n      >\n        {showColorPicker ? \"Close\" : \"Text Color\"}\n      </button>\n      <div\n        className={styles.ChromePickerContainer}\n        style={!showColorPicker ? { display: \"none\" } : null}\n      >\n        <ChromePicker\n          color={props.currentColor}\n          onChange={(updatedColor) => props.setColor(updatedColor.hex)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPicker;\n","import React, { useState, useEffect } from \"react\";\n\nimport styles from \"./index.module.css\";\n\n// import downloadImg from \"../downloadImg\";\n\nimport useImage from \"../useImage\";\n\nimport FontButtons from \"./FontButtons\";\n\nimport ColorPicker from \"./ColorPicker\";\n\nexport default React.forwardRef(\n  ({ image, setImage, getImage }, imageNodeRef) => {\n    const [topText, setTopText] = useState({ text: \"top text\", inner: true });\n    const [bottomText, setBottomText] = useState({\n      text: \"bottom text\",\n      inner: true,\n    });\n\n    const [fontText, setFontText] = useState(\"\");\n\n    const [fontSize, setFontSize] = useState(12);\n\n    const [textColor, setTextColor] = useState(\"black\");\n\n    const getInnerStyle = (text, font, SizeOfFont) => {\n      return {\n        display: text.inner ? \"block\" : \"none\",\n        color: textColor,\n        fontFamily: font,\n        fontSize: SizeOfFont,\n      };\n    };\n    // Function that create the top text section\n    const getOuterStyle = (text, font, SizeOfFont) => {\n      return {\n        display: !text.inner ? \"block\" : \"none\",\n        color: textColor,\n        backgroundColor: text.inner ? \"transparent\" : \"white\",\n        fontFamily: font,\n        fontSize: SizeOfFont,\n      };\n    };\n\n    return (\n      <div className={styles.bodyContainer}>\n        <div\n          className={styles.memeContainer}\n          style={{\n            height: image.height + \"px\",\n            width: image.width + \"px\",\n          }}\n        >\n          <div\n            style={getOuterStyle(topText, fontText, fontSize)}\n            className={styles.textTop}\n          >\n            {topText.text}\n          </div>\n\n          <MemeImage ref={imageNodeRef} image={image} onClick={() => {}}>\n            <div\n              style={getInnerStyle(topText, fontText, fontSize)}\n              className={styles.textTop}\n            >\n              {topText.text}\n            </div>\n            {/* This span prevents that the bottom text to go up when the top text is outside of the image */}\n            <span></span>\n\n            {/* Inside Bottom text */}\n            <div\n              style={getInnerStyle(bottomText, fontText, fontSize)}\n              className={styles.textBottom}\n            >\n              {bottomText.text}\n            </div>\n          </MemeImage>\n          <div\n            style={getOuterStyle(bottomText, fontText, fontSize)}\n            className={styles.textBottom}\n          >\n            {bottomText.text}\n          </div>\n        </div>\n\n        <div className={styles.options}>\n          {/* Text Input. Top and Bottom */}\n          <label htmlFor=\"inp\" className={styles.inp}>\n            <input\n              id=\"inp\"\n              type=\"text\"\n              value={topText.text}\n              onChange={(e) => {\n                setTopText({ ...topText, text: e.target.value });\n              }}\n            />\n            <span className={styles.label}>Top Text</span>\n            <span className={styles.focusBg}></span>\n          </label>\n          <label htmlFor=\"inp2\" className={styles.inp}>\n            <input\n              id=\"inp2\"\n              type=\"text\"\n              value={bottomText.text}\n              onChange={(e) => {\n                setBottomText({ ...bottomText, text: e.target.value });\n              }}\n            />\n            <span className={styles.label}>Bottom Text</span>\n            <span className={styles.focusBg}></span>\n          </label>\n\n          {/* Button to Change Top text position */}\n          <button\n            className={styles.Button}\n            onClick={() => setTopText({ ...topText, inner: !topText.inner })}\n          >\n            Top in/out\n          </button>\n\n          {/* Button to Change Bottom text position */}\n          <button\n            className={styles.Button}\n            onClick={() =>\n              setBottomText({ ...bottomText, inner: !bottomText.inner })\n            }\n          >\n            bottom in/out\n          </button>\n        </div>\n        <div className={styles.fontStyleContainer}>\n          <FontButtons\n            setFont={setFontText}\n            setSize={setFontSize}\n            letterSize={fontSize}\n          ></FontButtons>\n          <ColorPicker setColor={setTextColor} currentColor={textColor} />\n        </div>\n      </div>\n    );\n  }\n);\n\nconst MemeImage = React.forwardRef(({ image, children }, imageNodeRef) => {\n  return (\n    <div\n      ref={imageNodeRef}\n      className={styles.memeImage}\n      style={{\n        backgroundImage: \"url(\" + image.src + \")\",\n        height: image.height + \"px\",\n        width: image.width + \"px\",\n        position: \"relative\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n      }}\n    >\n      {children}\n    </div>\n  );\n});\n","export default (e) => {\n  const relation = getTotalLocation(e.target);\n  return calcRelativePos(e, relation);\n};\n\nexport const calcRelativePos = (e, relation) => {\n  const x = e.pageX - relation.totalOffsetLeft;\n  const y = e.pageY - relation.totalOffsetTop;\n  const left = x + \"px\";\n  const top = y + \"px\";\n  return { left, top };\n};\n\nexport const getTotalLocation = (node) => {\n  let totalOffsetLeft = node.offsetLeft;\n  let totalOffsetTop = node.offsetTop;\n  while (node.offsetParent) {\n    node = node.offsetParent;\n\n    totalOffsetLeft += node.offsetLeft;\n    totalOffsetTop += node.offsetTop;\n  }\n  return { totalOffsetLeft, totalOffsetTop };\n};\n","import { useReducer } from \"react\";\n\nimport calcPos from \"./calcPos\";\n\nexport default () => {\n  return useReducer(reducer, []);\n};\n\nfunction reducer(memeTexts, action) {\n  switch (action.type) {\n    case \"addText\":\n      return addText(memeTexts, action);\n    case \"setText\":\n      return setText(memeTexts, action);\n    case \"removeText\":\n      return removeText(memeTexts, action);\n    case \"changeTextStyle\":\n      return changeTextStyle(memeTexts, action);\n    case \"changePosition\":\n      return changePosition(memeTexts, action);\n    case \"onFocus\":\n      return onFocus(memeTexts, action);\n    default:\n      console.log(\"default\");\n      break;\n  }\n}\n\nexport const addText = (memeTexts, { event }) => {\n  const newMemeText = getNewMemeText(event);\n  return [...memeTexts.map((v) => ({ ...v, focus: false })), newMemeText];\n};\n\nexport const removeText = (memeTexts, { id }) => {\n  const index = findIndexById(id, memeTexts);\n  return [...memeTexts.slice(0, index), ...memeTexts.slice(index + 1)];\n};\n\nconst findIndexById = (id, arr) => {\n  return (\n    [0, ...arr].reduce(\n      (total, next, index) => (id === next.id && index) || total\n    ) - 1\n  );\n};\n\nexport const setText = (memeTexts, { id, newText }) => {\n  const index = findIndexById(id, memeTexts);\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\n  arr[index].text = newText;\n  arr[index].focus = true;\n  return [...arr];\n};\n\nexport const onFocus = (memeTexts, { id }) => {\n  const index = findIndexById(id, memeTexts);\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\n  arr[index].new = false;\n  arr[index].focus = true;\n  return [...arr];\n};\n\nexport const changeTextStyle = (memeTexts, { id, prop, value }) => {\n  const index = findIndexById(id, memeTexts);\n\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\n  if (prop === \"fontSize\") value = parseInt(value);\n  arr[index].style[prop] = value;\n  arr[index].focus = true;\n  return [...arr];\n};\n\nexport const changePosition = (memeTexts, { id, newPos }) => {\n  const index = findIndexById(id, memeTexts);\n  const arr = memeTexts.map((v) => ({ ...v, focus: false }));\n  arr[index] = JSON.parse(JSON.stringify(arr[index]));\n  arr[index].style.left = newPos.left;\n  arr[index].style.top = newPos.top;\n  arr[index].focus = true;\n  return [...arr];\n};\n\nlet id = 0;\n\nconst getNewMemeText = (e) => {\n  const result = calcPos(e);\n  const new_MemeText = {\n    id: id++,\n    text: \"text\",\n    style: {\n      display: \"block\",\n      position: \"absolute\",\n      zIndex: \"100\",\n      color: \"white\",\n      cols: \"4\",\n      fontSize: 30,\n      resize: \"none\",\n      borderWidth: \"0px\",\n      borderColor: \"transparent\",\n      backgroundColor: \"transparent\",\n      transform: \"\",\n      left: result.left,\n      top: result.top,\n    },\n    new: true,\n    focus: true,\n  };\n\n  return new_MemeText;\n};\n","import React, { useRef, useEffect, useContext } from \"react\";\n\nimport { MemeTextsContext } from \"../index\";\nimport { calcRelativePos } from \"../calcPos\";\n\nexport default React.forwardRef(({ element }, ref) => {\n  const { reduceMemeTexts, offset } = useContext(MemeTextsContext);\n  const { text, style, id } = element;\n\n  const expandWithText = (e) => {\n    const max = e.target.value\n      .split(\"\\n\")\n      .map((x) => x.length)\n      .reduce((total, num) => Math.max(total, num));\n    e.target.style.width = max + 2 + \"ch\";\n  };\n\n  const adjustRows = (e) =>\n    (e.target.rows = Math.max(1, e.target.value.split(\"\\n\").length));\n\n  const onChange = (e) => {\n    adjustRows(e);\n    expandWithText(e);\n    reduceMemeTexts({ type: \"setText\", newText: e.target.value, id });\n  };\n\n  const onDrag = (e) => {\n    reduceMemeTexts({\n      type: \"changePosition\",\n      id,\n      newPos: calcRelativePos(e, offset),\n    });\n  };\n\n  const focusedMemeText = useRef();\n\n  useEffect(() => {\n    focusedMemeText.current.focus();\n  }, []);\n\n  return (\n    <textarea\n      draggable=\"true\"\n      onFocus={() => reduceMemeTexts({ type: \"onFocus\", id })}\n      onDrag={onDrag}\n      onDragEnd={onDrag}\n      type=\"text\"\n      onChange={onChange}\n      value={text}\n      style={style}\n      ref={focusedMemeText}\n      rows=\"1\"\n      cols=\"4\"\n    />\n  );\n});\n","import React, { useContext } from \"react\";\n\nimport { MemeTextsContext } from \"../index\";\n\nexport default ({ image, children }) => {\n  const { reduceMemeTexts } = useContext(MemeTextsContext);\n\n  return (\n    <div\n      style={{\n        backgroundImage: \"url(\" + image.src + \")\",\n        height: image.height + \"px\",\n        width: image.width + \"px\",\n        position: \"relative\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\",\n      }}\n    >\n      <div\n        onClick={(event) => {\n          reduceMemeTexts({\n            type: \"addText\",\n            event: {\n              pageX: event.pageX,\n              target: event.target,\n              pageY: event.pageY,\n            },\n          });\n        }}\n        style={{ width: \"inherit\", height: \"inherit\" }}\n      ></div>\n      {children}\n    </div>\n  );\n};\n","import Meme from \"./Meme\";\n\nexport default Meme;\n","import React, { useContext } from \"react\";\n\nimport { MemeTextsContext } from \"../index\";\n\nimport MemeText from \"./MemeText\";\nimport MemeImage from \"./MemeImage\";\n\nexport default React.forwardRef(({ onImageClick, image }, ref) => {\n  const { memeTexts } = useContext(MemeTextsContext);\n\n  const MemeTexts = memeTexts.map((element, i) => (\n    <MemeText key={i} element={element} />\n  ));\n\n  return (\n    <div ref={ref}>\n      <MemeImage image={image} onClick={onImageClick}>\n        {MemeTexts}\n      </MemeImage>\n    </div>\n  );\n});\n\n/*Forward ref makes it possible to forward the ref to the component*/\n","import domeToImage from \"dom-to-image\";\n\nfunction downloadImg(node, memeName) {\n  domeToImage\n    .toPng(node)\n    .then(function (dataUrl) {\n      downloadMeme(dataUrl, memeName);\n    })\n    .catch(function (error) {\n      console.error(\"oops, something went wrong!\", error);\n    });\n}\n\nfunction downloadMeme(dataUrl, name) {\n  var link = document.createElement(\"a\");\n  link.download = (name && name + \".jpg\") || \"meme.jpg\";\n  link.href = dataUrl;\n  link.click();\n}\n\nexport default downloadImg;\n","import MemeTextOptions from \"./MemeTextOptions\";\n\nexport default MemeTextOptions;\n","import React, { useContext } from \"react\";\n\nimport styles from \"./index.module.css\";\n\nimport { MemeTextsContext } from \"../../index\";\n\nexport default ({ memeText }) => {\n  const { reduceMemeTexts } = useContext(MemeTextsContext);\n  return (\n    <>\n      <div>\n        <h5 className={styles.headline}>\n          {memeText.text}\n          <img\n            className={styles.removeButton}\n            src=\"/memeCreator/src/icon/remove.png\"\n            onClick={() =>\n              reduceMemeTexts({ type: \"removeText\", id: memeText.id })\n            }\n            alt=\"remove\"\n          />\n        </h5>\n      </div>\n      <div>\n        {[\n          \"color\",\n          \"backgroundColor\",\n          \"fontSize\",\n          \"transform\",\n          \"textTransform\",\n        ].map((propName, i) => (\n          <div key={i}>\n            <label htmlFor={i + \"propName\"}>Set css {propName}</label>\n            <br />\n            <input\n              id={i + \"propName\"}\n              value={memeText.style[propName]}\n              onChange={(e) =>\n                reduceMemeTexts({\n                  type: \"changeTextStyle\",\n                  id: memeText.id,\n                  prop: propName,\n                  value: e.target.value,\n                })\n              }\n            />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import Options from \"./Options\";\n\nexport default Options;\n","import React, { useContext } from \"react\";\n\nimport styles from \"./index.module.css\";\n\nimport downloadImg from \"../../downloadImg\";\n\nimport { MemeTextsContext } from \"../index\";\n\nimport MemeTextOptions from \"./MemeTextOptions\";\n\nexport default function Options({ memeImageRef, getImage }) {\n  const { memeTexts } = useContext(MemeTextsContext);\n  return (\n    <div className={styles.options}>\n      <div className={styles.memeTextsButtons}>\n        {memeTexts\n          .filter((x) => x.focus)\n          .map((memeText, i) => (\n            <MemeTextOptions key={i} memeText={memeText} />\n          ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport useMemeTextsReducer from \"./MemeTextState\";\n\nimport styles from \"./index.module.css\";\n\nimport Meme from \"./Meme\";\n\nimport useImage from \"../useImage\";\n\nimport Options from \"./Options\";\n\nimport { getTotalLocation } from \"./calcPos\";\n\nexport const MemeTextsContext = React.createContext([]);\n\nexport default React.forwardRef(\n  ({ selectedMeme, image, getImage, setImage }, imageNodeRef) => {\n    const [memeTexts, reduceMemeTexts] = useMemeTextsReducer();\n\n    const [offset, setOffSet] = useState({\n      totalOffsetLeft: 0,\n      totalOffsetTop: 0,\n    });\n\n    useEffect(() => {\n      if (imageNodeRef.current) {\n        setOffSet(getTotalLocation(imageNodeRef.current));\n      }\n    }, [memeTexts]);\n\n    return (\n      <div className={styles.bodyContainer}>\n        <MemeTextsContext.Provider\n          value={{ memeTexts: memeTexts, reduceMemeTexts, offset }}\n        >\n          <Meme ref={imageNodeRef} image={image} />\n          <Options memeImageRef={imageNodeRef} getImage={getImage} />\n        </MemeTextsContext.Provider>\n      </div>\n    );\n  }\n);\n","import FreeStyleMeme, { MemeTextsContext } from \"./FreeStyleMeme\";\n\nexport default FreeStyleMeme;\n\nexport { MemeTextsContext };\n","import React, { useState } from \"react\";\nimport styles from \"./index.module.css\";\nimport downloadImg from \"../downloadImg\";\nimport { Redirect } from \"react-router-dom\";\n\nconst Nav = ({ imageNodeRef, getImage, memeName }) => {\n  const [goHome, setGoHome] = useState(false);\n\n  return (\n    <div className={styles.navContainer}>\n      {goHome && <Redirect to=\"/memeCreator/\"></Redirect>}\n      <button onClick={() => setGoHome(!goHome)}>Home</button>\n      <label htmlFor=\"files\" className={styles.Button}>\n        Upload an Image\n      </label>\n      <input\n        id=\"files\"\n        type=\"file\"\n        name=\"load image\"\n        accept=\"image/png, image/jpeg\"\n        onChange={getImage}\n        style={{ display: \"none\" }}\n      />\n      <button\n        className={styles.Button}\n        onClick={() => {\n          downloadImg(imageNodeRef.current, memeName);\n        }}\n      >\n        Download Meme\n      </button>\n      <a>Share</a>\n      <a>Sign in</a>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport styles from \"./index.module.css\";\n\nimport TextImage from \"./TextImage\";\n\nimport FreeStyleMeme from \"./FreeStyleMeme\";\n\nimport Nav from \"./Nav\";\n\nimport useImage from \"./useImage\";\n\nconst nums = Math.floor(Math.random() * 100);\n\nexport default () => {\n  const [image, getImage, setImage] = useImage();\n  const { memeType } = useParams();\n  // freestyle === FreeStyleMeme and rest can be TextImage\n  const [meme, setMeme] = useState([]);\n  const [selectedMeme, setSelectedMeme] = useState();\n  const [nameMeme, setNameMeme] = useState(\"meme\");\n  useEffect(() => {\n    fetch(\" https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((result) => {\n        setMeme(\n          result.data.memes.map((x) => {\n            const img = new Image();\n            img.src = x.url;\n            const MAX_SIZE = 500;\n            if (img.height > MAX_SIZE || img.width > MAX_SIZE) {\n              const ratio = img.height / img.width;\n\n              if (img.height > img.width) {\n                img.height = MAX_SIZE;\n                img.width = MAX_SIZE / ratio;\n              } else {\n                img.width = MAX_SIZE;\n                img.height = MAX_SIZE * ratio;\n              }\n            }\n\n            return img;\n          })\n        ); // <-- this is an array of urls\n      })\n      .catch((error) => {});\n  }, []);\n  const handleMemeSelector = (e) => {\n    setSelectedMeme({\n      src: e.target.src,\n      height: e.target.height * 5,\n      width: e.target.width * 5,\n    });\n  };\n\n  useEffect(() => {\n    if (selectedMeme) {\n      setImage(selectedMeme);\n    }\n  }, [selectedMeme]);\n\n  const imageNodeRef = useRef();\n\n  return (\n    <div className={styles.editor}>\n      <Nav\n        className={styles.nav}\n        imageNodeRef={imageNodeRef}\n        getImage={getImage}\n        memeName={nameMeme}\n      ></Nav>\n      <div className={styles.header}>\n        <h3>Make Your Own Meme! </h3>\n      </div>\n      <div className={styles.egMemeContainer}>\n        {meme.slice(nums, nums + 6).map((img, i) => (\n          <img\n            key={i}\n            className={styles.imgMeme}\n            onClick={handleMemeSelector}\n            src={img.src}\n            style={{\n              width: img.width * 0.2 + \"px\",\n              height: img.height * 0.2 + \"px\",\n            }}\n            alt=\"img\"\n          ></img>\n        ))}\n      </div>\n\n      <div className={styles.bodyContainer}>\n        <label htmlFor=\"inp\"> Meme Name: </label>\n        <input\n          id=\"inp\"\n          type=\"text\"\n          value={nameMeme}\n          onChange={(e) => {\n            setNameMeme(e.target.value);\n          }}\n        />\n        {memeType === \"freestyle\" && (\n          <FreeStyleMeme\n            ref={imageNodeRef}\n            image={image}\n            getImage={getImage}\n            setImage={setImage}\n            selectedMeme={selectedMeme}\n          />\n        )}\n        {memeType !== \"freestyle\" && (\n          <TextImage\n            ref={imageNodeRef}\n            image={image}\n            getImage={getImage}\n            setImage={setImage}\n            selectedMeme={selectedMeme}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nexport default () => {\n  const [image, setImage] = useState({ src: \"\" });\n\n  const angryImg = \"/memeCreator/images/AngrySection.jpeg\";\n\n  const resizeImg = (img) => {\n    setTimeout(() => {\n      const MAX_SIZE = 500;\n      if (img.height > MAX_SIZE || img.width > MAX_SIZE) {\n        const ratio = img.height / img.width;\n\n        if (img.height > img.width) {\n          img.height = MAX_SIZE;\n          img.width = MAX_SIZE / ratio;\n        } else {\n          img.width = MAX_SIZE;\n          img.height = MAX_SIZE * ratio;\n        }\n      }\n      setTimeout(() => {\n        setImage(img);\n      }, 0);\n    });\n  };\n\n  const img = new Image();\n  img.src = angryImg;\n\n  useEffect(() => {\n    resizeImg(img);\n  }, []);\n\n  const getImage = (e) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      img.src = e.target.result;\n      console.log(img.height);\n      resizeImg(img);\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n  return [image, getImage, setImage];\n};\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nimport styles from \"./index.module.css\";\n\nexport default () => {\n  return (\n    <div className={styles.component}>\n      <nav>\n        <button>Categories</button>\n        <button>Sign In</button>{\" \"}\n      </nav>\n      <h2>This is the memetypes page</h2>\n      <br />\n      <div className={styles.typeContainer}>\n        <Link\n          className={styles.linkMemeTypes}\n          to=\"/memeCreator/memetypes/textInOfImage\"\n        >\n          Text in image\n          <img\n            className={styles.memeTypesImg}\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\n            alt=\"funny\"\n          ></img>\n        </Link>\n        <Link\n          className={styles.linkMemeTypes}\n          to=\"/memeCreator/memetypes/freestyle\"\n        >\n          <h3>Editor 2</h3>\n          <img\n            className={styles.memeTypesImg}\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\n            alt=\"serious\"\n          ></img>\n        </Link>\n        <Link\n          className={styles.linkMemeTypes}\n          to=\"/memeCreator/memetypes/angry\"\n        >\n          Memetype angry\n          <img\n            className={styles.memeTypesImg}\n            src=\"https://i.picsum.photos/id/1011/5472/3648.jpg?hmac=Koo9845x2akkVzVFX3xxAc9BCkeGYA9VRVfLE4f0Zzk\"\n            alt=\"angry\"\n          ></img>\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport IntroPage from \"./components/IntroPage\";\nimport MemeEditor from \"./components/MemeEditor\";\n\nimport MemeTypes from \"./components/MemeTypes\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/memeCreator/memetypes/:memeType\">\n          <MemeEditor />\n        </Route>\n        <Route path=\"/memeCreator/memetypes\">\n          <MemeTypes />\n        </Route>\n        <Route path=\"/memeCreator\">\n          <IntroPage />\n        </Route>\n        <Route path=\"/\"></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"intropage_component__1fiFS\",\"Link\":\"intropage_Link__3kmr_\",\"imgContainer\":\"intropage_imgContainer__2D5vi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"ColorPicker_bodyContainer__3K1tb\",\"Button\":\"ColorPicker_Button__2H8Gq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navContainer\":\"Nav_navContainer__3iqIV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"Options_options__3NG31\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"MemeTextOptions_headline__3-spi\",\"removeButton\":\"MemeTextOptions_removeButton__1M9K0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodyContainer\":\"TextImage_bodyContainer__17IC1\",\"memeContainer\":\"TextImage_memeContainer__2dkYt\",\"memeImage\":\"TextImage_memeImage__18Kam\",\"fontStyleContainer\":\"TextImage_fontStyleContainer__38l8I\",\"textBottom\":\"TextImage_textBottom__2Sq_X\",\"textTop\":\"TextImage_textTop__1OC6q\",\"options\":\"TextImage_options__2wz8d\",\"styleOptions\":\"TextImage_styleOptions__3NlbL\",\"Button\":\"TextImage_Button__3DXSp\",\"inp\":\"TextImage_inp__oYKOa\",\"label\":\"TextImage_label__1t2Z8\",\"focusBg\":\"TextImage_focusBg__2OC-F\"};"],"sourceRoot":""}